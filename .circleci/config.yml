version: 2.1

commands:
  install_tox:
    description: "Install tox"
    steps:
      - restore_cache:
          keys:
            - v2-pip
          name: "Restoring pip cache"
      - run:
          command: mkdir -p ~/pip-cache
          name: "Creating pip cache dir"
      - run:
          command: pip --cache-dir ~/pip-cache install tox tox-venv
          name: "Installing tox & tox-venv"
      - save_cache:
          paths:
            - ~/pip-cache
          key: v2-pip
          name: "Saving pip cache"

  install_tox_deps:
    description: "Install tox dependencies"
    parameters:
      toxenvs:
        type: string
        default: "ALL"
    steps:
      - restore_cache:
          keys:
            - v4-tox-<< parameters.toxenvs >>-{{ checksum "requirements-test.txt" }}-{{ .Branch }}
            - v4-tox-<< parameters.toxenvs >>-{{ checksum "requirements-test.txt" }}-
          name: "Restoring tox envs cache: << parameters.toxenvs >>"
      - run:
          command: mkdir -p ~/tox-workdir
          name: "Creating tox work dir"
      - run:
          command: tox --workdir ~/tox-workdir --notest -e << parameters.toxenvs >>
          name: "Installing tox env dependencies: << parameters.toxenvs >>"
      - save_cache:
          paths:
            - ~/tox-workdir
          key: v4-tox-<< parameters.toxenvs >>-{{ checksum "requirements-test.txt" }}-{{ .Branch }}
          name: "Saving tox envs cache: << parameters.toxenvs >>"

  run_tox:
    description: "Run tox"
    parameters:
      toxenv:
        type: string
        default: "ALL"
    steps:
      - run:
          command: tox --workdir ~/tox-workdir -e << parameters.toxenv >>
          name: "Running tox: << parameters.toxenv >>"

  store_tox_results:
    description: "Store test results"
    steps:
      - run:
          name: "Copying any JUnit test results to subdir"
          command: |
            if [ -f "test-results-<< parameters.toxenv >>.xml" ]; then
              mkdir -p test-results/<< parameters.toxenv >>
              cp test-results-<< parameters.toxenv >>.xml test-results/<< parameters.toxenv >>/results.xml
            fi
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov

jobs:

  lint:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - install_tox
      - install_tox_deps:
          toxenvs: check,mypy,flake8,black,bandit
      - run_tox:
          toxenv: check
      - run_tox:
          toxenv: mypy
      - run_tox:
          toxenv: flake8
      - run_tox:
          toxenv: black
      - run_tox:
          toxenv: bandit

  py352:
    docker:
      - image: python:3.5.2
    steps:
      - checkout
      - install_tox
      - install_tox_deps:
          toxenvs: clean,py35-asyncio,py35-uvloop,coverage
      - run_tox:
          toxenv: clean
      - run_tox:
          toxenv: py35-asyncio
      - run_tox:
          toxenv: py35-uvloop
      - run_tox:
          toxenv: coverage
      - store_tox_results

  py35:
    docker:
      - image: python:3.5-stretch
    steps:
      - checkout
      - install_tox
      - install_tox_deps:
          toxenvs: clean,py35-asyncio,py35-uvloop,coverage
      - run_tox:
          toxenv: clean
      - run_tox:
          toxenv: py35-asyncio
      - run_tox:
          toxenv: py35-uvloop
      - run_tox:
          toxenv: coverage
      - store_tox_results

  py36:
    docker:
      - image: python:3.6-stretch
    steps:
      - checkout
      - install_tox
      - install_tox_deps:
          toxenvs: clean,py36-asyncio,py36-uvloop,coverage
      - run_tox:
          toxenv: clean
      - run_tox:
          toxenv: py36-asyncio
      - run_tox:
          toxenv: py36-uvloop
      - run_tox:
          toxenv: coverage
      - store_tox_results

  py37:
    docker:
      - image: python:3.7-stretch
    steps:
      - checkout
      - install_tox
      - install_tox_deps:
          toxenvs: clean,py37-uvloop,coverage
      - run_tox:
          toxenv: clean
      - run_tox:
          toxenv: py37-asyncio
      - run_tox:
          toxenv: py37-uvloop
      - run_tox:
          toxenv: coverage
      - store_tox_results

  pypy35:
    docker:
      - image: pypy:3.5-stretch
    steps:
      - checkout
      - install_tox
      - install_tox_deps:
          toxenvs: clean,pypy35-asyncio,coverage
      - run_tox:
          toxenv: clean
      - run_tox:
          toxenv: pypy35-asyncio
      - run_tox:
          toxenv: coverage
      - store_tox_results

  pypy36:
    docker:
      - image: pypy:3.6-stretch
    steps:
      - checkout
      - install_tox
      - install_tox_deps:
          toxenvs: clean,pypy36-asyncio,coverage
      - run_tox:
          toxenv: clean
      - run_tox:
          toxenv: pypy36-asyncio
      - run_tox:
          toxenv: coverage
      - store_tox_results

  py38:
    docker:
      - image: python:3.8-rc-buster
    steps:
      - checkout
      - install_tox
      - install_tox_deps:
          toxenvs: clean,py38-asyncio,coverage
          # uvloop on py38 is broken :(
          # toxenvs: clean,py38-asyncio,py38-uvloop,coverage
      - run_tox:
          toxenv: clean
      - run_tox:
          toxenv: py38-asyncio
      # - run_tox:
      #     toxenv: py38-uvloop
      - run_tox:
          toxenv: coverage
      - store_tox_results

workflows:
  version: 2
  lint_and_test:
    jobs:
      - lint
      - py352:
          requires:
            - lint
      - py35:
          requires:
            - lint
      - py36:
          requires:
            - lint
      - py37:
          requires:
            - lint
      - pypy35:
          requires:
            - lint
      - pypy36:
          requires:
            - lint
      - py38:
          requires:
            - lint
