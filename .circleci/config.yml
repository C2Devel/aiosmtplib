version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

commands:

  upgrade_pip:
    description: "Upgrade pip"
    steps:
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade pip
          name: "Upgrading pip"

  install_tox:
    description: "Install tox"
    steps:
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade tox
          name: "Installing tox"
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade tox-venv
          name: "Installing tox plugins"

  install_poetry:
    description: "Install poetry"
    steps:
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade poetry
          name: "Installing poetry"
      - run:
          command: poetry config settings.virtualenvs.path ~/.cache/poetry
          name: "Setting poetry venv dir"

  build_uvloop_from_source:
    description: "Build uvloop from source"
    steps:
      - run:
          working_directory: ~
          command: git clone --recursive https://github.com/MagicStack/uvloop.git uvloop-dev
          name: "Clone uvloop"
      - run:
          working_directory: ~/uvloop-dev
          command: |
            cd ~/uvloop-dev
            ls ~/
            ls ~/uvloop-dev
            ls
            pip install -r requirements.dev.txt
          name: "Install uvloop dev requirements"
      - run:
          working_directory: ~/uvloop-dev
          command: make
          name: "Compile uvloop"
      - run:
          command: pip install ~/uvloop-dev
          name: "Install dev uvloop"

  with_cachedirs:
    description: "Create/restore cache dirs"
    parameters:
      cache_key:
        type: string
      commands:
        type: steps
        default: []
    steps:
      - restore_cache:
          keys:
            - v1-cache-<< parameters.cache_key >>-{{ checksum "poetry.lock" }}-{{ .Branch }}
            - v1-cache-<< parameters.cache_key >>-{{ checksum "poetry.lock" }}-
          name: "Restoring cache dir: << parameters.cache_key >>"
      - run:
          command: mkdir -p ~/.cache/pip
          name: "Creating pip cache dir"
      - run:
          command: mkdir -p ~/.cache/pre-commit
          name: "Creating pre-commit cache dir"
      - run:
          command: mkdir -p ~/.poetry
          name: "Creating poetry venv dir"
      - run:
          command: mkdir -p ~/.tox
          name: "Creating tox work dir"
      - steps: << parameters.commands >>
      - save_cache:
          paths:
            - ~/.cache
            - ~/.poetry
            - ~/.tox
          key: v1-cache-<< parameters.cache_key >>-{{ checksum "poetry.lock" }}-{{ .Branch }}
          name: "Saving cache dirs: << parameters.cache_key >>"

  run_tox:
    description: "Run tox"
    parameters:
      toxenv:
        type: string
        default: "ALL"
    steps:
      - run:
          command: tox --workdir ~/.tox -e << parameters.toxenv >>
          name: "Running tox: << parameters.toxenv >>"

  install_and_run_toxenvs:
    description: "Install and run tox with multiple envs"
    parameters:
      toxenvs:
        type: string
        default: "ALL"
    steps:
      - with_cachedirs:
          cache_key: << parameters.toxenvs >>
          commands:
            - install_tox
            - run_tox:
                toxenv: << parameters.toxenvs >>
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
      - codecov/upload:
          file: coverage.xml

jobs:

  lint:
    docker:
      - image: python:3.7-buster
    steps:
      - checkout
      - with_cachedirs:
          cache_key: lint
          commands:
            - install_tox
            - run_tox:
                toxenv: lint

  docs:
    docker:
      - image: python:3.7-buster
    steps:
      - checkout
      - with_cachedirs:
          cache_key: docs
          commands:
            - install_tox
            - run_tox:
                toxenv: docs

  py352:
    docker:
      - image: python:3.5.2
    steps:
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,py35-asyncio,py35-uvloop,coverage

  py35:
    docker:
      - image: python:3.5-buster
    steps:
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,py35-asyncio,py35-uvloop,coverage

  py36:
    docker:
      - image: python:3.6-buster
    steps:
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,py36-asyncio,py36-uvloop,coverage

  py37:
    docker:
      - image: python:3.7-buster
    steps:
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,py37-asyncio,py37-uvloop,coverage

  py38:
    docker:
      - image: python:3.8-buster
    steps:
      - checkout
      - build_uvloop_from_source
      - install_and_run_toxenvs:
          toxenvs: clean,py38-asyncio, py38-uvloop,coverage

  pypy3:
    docker:
      - image: pypy:3-stretch
    steps:
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,pypy3-asyncio,coverage

  deploy_to_pypi:
    docker:
      - image: python:3.7-buster
    steps:
      - checkout
      - upgrade_pip
      - install_poetry
      - run:
          name: Building packages
          command: poetry build
      - run:
          name: Uploading to Test PyPI
          command: |
            poetry config repositories.testpypi https://test.pypi.org/simple
            poetry publish --repository testpypi --username $TESTPYPI_USERNAME --password $TESTPYPI_PASSWORD
      - run:
          name: Uploading to PyPI
          command: poetry publish --repository pypi --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  version: 2
  lint_and_test:
    jobs:
      - lint:
          filters:
            tags:
              only: /.*/
      - docs:
          filters:
            tags:
              only: /.*/
      - py352:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - py35:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - py36:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - py37:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - pypy3:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - py38:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - deploy_to_pypi:
          requires:
            - lint
            - docs
            - py352
            - py35
            - py36
            - py37
            - py38
            - pypy3
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
