version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

commands:
  python_version:
    description: "Output Python version"
    steps:
      - run:
          command: python -V
          name: "Checking python version"

  upgrade_pip:
    description: "Upgrade pip"
    steps:
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade setuptools
          name: "Upgrading setuptools"
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade pip
          name: "Upgrading pip"

  install_tox:
    description: "Install tox"
    steps:
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade tox
          name: "Installing tox"
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade tox-venv
          name: "Installing tox plugins"

  install_poetry:
    description: "Install poetry"
    steps:
      - run:
          command: pip --cache-dir ~/.cache/pip install --upgrade poetry
          name: "Installing poetry"
      - run:
          command: poetry config virtualenvs.path ~/.cache/poetry
          name: "Setting poetry venv dir"

  with_cachedirs:
    description: "Create/restore tox cache dirs"
    parameters:
      cache_key:
        type: string
      include_hypothesis:
        description: Cache the hypothesis database
        type: boolean
        default: false
      include_precommit:
        description: Cache the pre-commit environment
        type: boolean
        default: false
      commands:
        type: steps
        default: []
    steps:
      - restore_cache:
          keys:
            - v4-tox-cache-<< parameters.cache_key >>-{{ checksum "poetry.lock" }}-{{ .Branch }}
            - v4-tox-cache-<< parameters.cache_key >>-{{ checksum "poetry.lock" }}-
            - v4-tox-cache-<< parameters.cache_key >>-
          name: "Restoring tox workdir cache: << parameters.cache_key >>"
      - when:
          condition: << parameters.include_hypothesis >>
          steps:
            - restore_cache:
                name: "Restoring hypothesis db cache"
                keys:
                  - v1-hypothesis-cache-{{ .Branch }}
                  - v1-hypothesis-cache-
      - when:
          condition: << parameters.include_precommit >>
          steps:
            - restore_cache:
                name: "Restoring pre-commit env cache"
                keys:
                  - v1-pre-commit-cache-{{ checksum ".pre-commit-config.yaml" }}-{{ .Branch }}
                  - v1-pre-commit-cache-{{ checksum ".pre-commit-config.yaml" }}-
                  - v1-pre-commit-cache-
      - run:
          command: mkdir -p ~/.cache/pip
          name: "Creating pip cache dir"
      - run:
          command: mkdir -p ~/.tox
          name: "Creating tox work dir"
      - when:
          condition: << parameters.include_hypothesis >>
          steps:
            - run:
                command: mkdir -p ~/project/.hypothesis
                name: "Creating hypothesis test db dir"
      - when:
          condition: << parameters.include_precommit >>
          steps:
            - run:
                command: mkdir -p ~/.cache/pre-commit
                name: "Creating pre-commit cache dir"
      - steps: << parameters.commands >>
      - save_cache:
          paths:
            - ~/.cache/pip
            - ~/.tox
          key: v4-tox-cache-<< parameters.cache_key >>-{{ checksum "poetry.lock" }}-{{ .Branch }}
          name: "Caching tox workdirs: << parameters.cache_key >>"
      - when:
          condition: << parameters.include_hypothesis >>
          steps:
            - save_cache:
                paths:
                  - ~/project/.hypothesis
                key: v1-hypothesis-cache-{{ .Branch }}
                name: "Caching hypothesis test db"
      - when:
          condition: << parameters.include_precommit >>
          steps:
            - save_cache:
                name: "Caching pre-commit env"
                paths:
                  - ~/.cache/pre-commit
                key: v1-pre-commit-cache-{{ checksum ".pre-commit-config.yaml" }}-{{ .Branch }}

  run_tox:
    description: "Run tox"
    parameters:
      toxenv:
        type: string
        default: "ALL"
    steps:
      - run:
          command: tox --workdir ~/.tox --installpkg dist/aiosmtplib-*.whl -e << parameters.toxenv >>
          name: "Running tox: << parameters.toxenv >>"

  install_and_run_toxenvs:
    description: "Install and run tox with multiple envs"
    parameters:
      toxenvs:
        type: string
        default: "ALL"
    steps:
      - attach_workspace:
          at: dist
      - with_cachedirs:
          cache_key: << parameters.toxenvs >>
          include_hypothesis: true
          commands:
            - upgrade_pip
            - install_tox
            - run_tox:
                toxenv: << parameters.toxenvs >>
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
      - codecov/upload:
          file: coverage.xml

jobs:
  lint:
    docker:
      - image: python:3.8-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - with_cachedirs:
          cache_key: lint
          include_precommit: true
          commands:
            - install_tox
            - run_tox:
                toxenv: lint

  docs:
    docker:
      - image: python:3.8-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - with_cachedirs:
          cache_key: docs
          commands:
            - install_tox
            - run_tox:
                toxenv: docs

  build:
    docker:
      - image: python:3.8-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - with_cachedirs:
          cache_key: poetry
          commands:
            - upgrade_pip
            - install_poetry
      - run:
          name: Building packages
          command: poetry build -vv
      - persist_to_workspace:
          root: dist
          paths:
            - aiosmtplib-*.tar.gz
            - aiosmtplib-*.whl
      - store_artifacts:
          path: aiosmtplib-*.tar.gz
      - store_artifacts:
          path: aiosmtplib-*.whl


  py36:
    docker:
      - image: python:3.6-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,py36-asyncio,py36-uvloop,coverage

  py37:
    docker:
      - image: python:3.7-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,py37-asyncio,py37-uvloop,coverage

  py38:
    docker:
      - image: python:3.8-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,py38-asyncio,py38-uvloop,coverage

  py39:
    docker:
      - image: python:3.9-rc-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,py39-asyncio,py39-uvloop,coverage

  pypy3:
    docker:
      - image: pypy:3-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - install_and_run_toxenvs:
          toxenvs: clean,pypy3-asyncio,coverage

  deploy_to_pypi:
    docker:
      - image: python:3.8-buster
    resource_class: small
    steps:
      - python_version
      - checkout
      - with_cachedirs:
          cache_key: poetry
          commands:
            - upgrade_pip
            - install_poetry
      - attach_workspace:
          at: dist
      - run:
          name: Uploading to Test PyPI
          command: |
            poetry config repositories.testpypi https://test.pypi.org/simple
            poetry publish -vv --repository testpypi --username $TESTPYPI_USERNAME --password $TESTPYPI_PASSWORD
      - run:
          name: Uploading to PyPI
          command: poetry publish -vv --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  version: 2
  lint_and_test:
    jobs:
      - lint:
          filters:
            tags:
              only: /.*/
      - docs:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - py36:
          requires:
            - lint
            - build
          filters:
            tags:
              only: /.*/
      - py37:
          requires:
            - lint
            - build
          filters:
            tags:
              only: /.*/
      - py38:
          requires:
            - lint
            - build
          filters:
            tags:
              only: /.*/
      - py39:
          requires:
            - lint
            - build
          filters:
            tags:
              only: /.*/
      - pypy3:
          requires:
            - lint
            - build
          filters:
            tags:
              only: /.*/
      - deploy_to_pypi:
          requires:
            - build
            - lint
            - docs
            - py36
            - py37
            - py38
            - py39
            - pypy3
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
