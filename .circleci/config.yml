version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

executors:
  py36:
    docker:
      - image: "cimg/python:3.6"
    resource_class: small
  py37:
    docker:
      - image: "cimg/python:3.7"
    resource_class: small
  py38:
    docker:
      - image: "cimg/python:3.8"
    resource_class: small
  py39:
    docker:
      - image: "python:3.9-rc-buster"
    resource_class: small
  pypy3:
    docker:
      - image: "pypy:3-buster"
    resource_class: small

commands:
  python_version:
    description: "Output Python version"
    steps:
      - run:
          command: python -V
          name: "Checking python version"

  restore_pip_cache:
    description: "Restore pip cache"
    steps:
      - restore_cache:
          name: "Restoring pip cache"
          keys:
            - pip-v1

  save_pip_cache:
    description: "Update pip cache"
    steps:
      - save_cache:
          name: "Updating pip cache"
          key: pip-v1
          paths:
            - ~/.cache/pip

  restore_tox_cache:
    description: "Restore tox cache"
    steps:
      - restore_cache:
          name: "Restoring tox cache"
          keys:
            - tox-v1-{{ .Environment.CIRCLE_JOB }}-{{ checksum "poetry.lock" }}
            - tox-v1-{{ .Environment.CIRCLE_JOB }}-
            - tox-v1-

  save_tox_cache:
    description: "Update tox cache"
    steps:
      - save_cache:
          name: "Updating tox cache"
          key: tox-v1-{{ .Environment.CIRCLE_JOB }}-{{ checksum "poetry.lock" }}
          paths:
            - ~/.tox

  restore_poetry_cache:
    description: "Restore poetry cache"
    steps:
      - restore_cache:
          name: "Restoring poetry cache"
          keys:
            - poetry-v1-{{ checksum "poetry.lock" }}
            - poetry-v1-

  save_poetry_cache:
    description: "Update poetry cache"
    steps:
      - save_cache:
          name: "Updating poetry cache"
          key: poetry-v1-{{ checksum "poetry.lock" }}
          paths:
            - ~/project/.poetry
            - ~/.cache/pypoetry

  upgrade_pip:
    description: "Upgrade pip"
    steps:
      - run:
          command: pip install --upgrade setuptools
          name: "Upgrading setuptools"
      - run:
          command: pip install --upgrade pip
          name: "Upgrading pip"

  install_tox:
    description: "Install tox"
    steps:
      - run:
          command: pip install --upgrade tox
          name: "Installing tox"
      - run:
          command: pip install --upgrade tox-venv
          name: "Installing tox plugins"

  install_poetry:
    description: "Install poetry"
    steps:
      - run:
          command: pip install --upgrade poetry
          name: "Installing poetry"

  run_tox:
    description: "Run tox"
    steps:
      - run:
          command: tox --workdir ~/.tox --installpkg dist/aiosmtplib-*.whl
          name: "Running tox"

jobs:
  lint:
    executor: py38
    steps:
      - python_version
      - checkout
      - restore_pip_cache
      - restore_poetry_cache
      - restore_tox_cache
      - restore_cache:
          name: "Restoring pre-commit cache"
          keys:
            - pre-commit-v1-{{ checksum ".pre-commit-config.yaml" }}
            - pre-commit-v1-
      - install_poetry
      - install_tox
      - run_tox
      - save_pip_cache
      - save_poetry_cache
      - save_tox_cache
      - save_cache:
          name: "Updating pre-commit cache"
          key: pre-commit-v1-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
    environment:
      TOXENV: lint

  docs:
    executor: py38
    environment:
      TOXENV: docs
    steps:
      - python_version
      - checkout
      - restore_pip_cache
      - restore_poetry_cache
      - restore_tox_cache
      - install_tox
      - run_tox
      - save_pip_cache
      - save_poetry_cache
      - save_tox_cache

  build:
    executor: py38
    environment:
    steps:
      - python_version
      - checkout
      - restore_pip_cache
      - restore_poetry_cache
      - install_poetry
      - run:
          name: Building packages
          command: poetry build -vv
      - persist_to_workspace:
          root: dist
          paths:
            - aiosmtplib-*.tar.gz
            - aiosmtplib-*.whl
      - store_artifacts:
          path: aiosmtplib-*.tar.gz
      - store_artifacts:
          path: aiosmtplib-*.whl
      - save_pip_cache
      - save_poetry_cache

  test:
    executor: <<parameters.executor_name>>
    environment:
      COVERAGE_FILE: "coverage-results/.coverage.<<parameters.executor_name>>-<<parameters.event_loop>>"
      HYPOTHESIS_PROFILE: "ci"
      TOXENV: "<<parameters.executor_name>>-<<parameters.event_loop>>"
    parameters:
      executor_name:
        type: string
        description: "executor name"
      event_loop:
        description: "event loop type (asyncio or uvloop)"
        default: "asyncio"
        type: enum
        enum:
          - asyncio
          - uvloop
    steps:
      - python_version
      - checkout
      - attach_workspace:
          at: dist
      - restore_pip_cache
      - restore_poetry_cache
      - restore_tox_cache
      - restore_cache:
          name: "Restoring hypothesis database"
          keys:
            - hypothesis-v1
      - install_tox
      - run_tox
      - save_pip_cache
      - save_poetry_cache
      - save_tox_cache
      - save_cache:
          name: "Updating hypothesis database"
          key: hypothesis-v1
          paths:
            - ~/project/.hypothesis
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: coverage-results
          paths:
            - .coverage.*

  coverage:
    executor: py38
    environment:
      TOXENV: coverage
    steps:
      - python_version
      - checkout
      - attach_workspace:
          at: coverage-results
      - run:
          command: cp coverage-results/.coverage.* ./
      - restore_pip_cache
      - restore_poetry_cache
      - restore_tox_cache
      - install_tox
      - run_tox
      - save_pip_cache
      - save_poetry_cache
      - save_tox_cache
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
      - codecov/upload:
          file: coverage.xml

  deploy_to_pypi:
    executor: py38
    steps:
      - python_version
      - checkout
      - restore_pip_cache
      - restore_poetry_cache
      - install_poetry
      - attach_workspace:
          at: dist
      - run:
          name: Uploading to Test PyPI
          command: |
            poetry config repositories.testpypi https://test.pypi.org/simple
            poetry publish -vv --repository testpypi --username $TESTPYPI_USERNAME --password $TESTPYPI_PASSWORD
      - run:
          name: Uploading to PyPI
          command: poetry publish -vv --username $PYPI_USERNAME --password $PYPI_PASSWORD
      - save_pip_cache
      - save_poetry_cache

workflows:
  version: 2
  lint_and_test:
    jobs:
      - lint:
          filters:
            tags:
              only: /.*/
      - docs:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - test:
          name: "test-<< matrix.executor_name >>-<<matrix.event_loop>>"
          requires:
            - build
          matrix:
            parameters:
              event_loop:
                - asyncio
                - uvloop
              executor_name:
                - py36
                - py37
                - py38
                - py39
                - pypy3
            exclude:
              - executor_name: pypy3
                event_loop: uvloop
          filters:
            tags:
              only: /.*/
      - coverage:
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - deploy_to_pypi:
          requires:
            - build
            - lint
            - docs
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
